import datetime
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render
from django.views import View, generic
from django.urls import reverse
from inquilinos.models import Reserva, Cab, Estado, Rango
from inquilinos.forms import RegResForm
from inquilinos.myparsers import CustomParser

# Views
class IndexView(View):
    '''Vista del home que acepta get requests y renderiza el template index.htm
    con las cabañas como contexto'''
    def get(self, request):
        cabs = Cab.objects.all()
        ctx = {
            "cabs": cabs,
        }
        return render(request, "inquilinos/index.html", ctx)


class CabDetailView(generic.DetailView):
    '''DetailView de Cabañas'''
    model = Cab
    template_name = "inquilinos/cab_detail.html"


class RegistroReservaView(View):
    ''' Vista de registro de reserva que utiliza un formulario custom y sobreescribe
    los métodos get y post de la vista abstracta para devolver el formulario con
    los datos cargados en caso de que el formulario sea inválido y guarda el contenido
    del DateRangePicker en dos campos distintos del modelo reserva en caso de que los
    datos sean correctos.'''
    model = Reserva
    # template_name = "inquilinos/reg_res.html"
    template_name = "inquilinos/reg_res.html"
    form_class = RegResForm
    def get(self, request, slug):
        # se genera el formulario vacío
        form = self.form_class()
        # se guarda el día de hoy en una variable para pasarlo como ctx
        today = datetime.date.today()
        # se pasa el día de hoy de datetime obj a str
        today = today.strftime("%d-%m-%Y")
        strp,strf,fmt=datetime.datetime.strptime,datetime.datetime.strftime,"%d/%m/%Y"
        # se obtienen todos los rangos en la db
        ranges = Rango.objects.all()
        foo = list()
        # se guardan todos los rangos (desde-hasta) en una lista
        for rango in ranges:
            foo.append(rango.fechaDesde.strftime("%d/%m/%Y"))
            foo.append(rango.fechaHasta.strftime("%d/%m/%Y"))
        
        # se generan todas las fechas intermedias entre los rangos especificados
        allowed_dates = [[strf(k,fmt) for k in (strp(i,fmt)+datetime.timedelta(days=n) for n in range((strp(j,fmt)-strp(i,fmt)).days+1))] for i,j in zip(foo[::2],foo[1::2])]
        
        # se flatea la lista (elimina los [])
        allowed_dates = [x for xs in allowed_dates for x in xs]

        # se obtienen todas las reservas en la db
        reservas = Reserva.objects.all()
        disabled_dates = list()

        # se genera una lista de listas con los rangos a deshabilitar correspondientes a las reservas que existen en la db
        for reserva in reservas:
            bar = []
            bar.append(reserva.fechaDesde.strftime("%d/%m/%Y"))
            bar.append(reserva.fechaHasta.strftime("%d/%m/%Y"))
            disabled_dates.append(bar)

        # se pasa como contexto el formulario vacío, el día de hoy y las fechas habilitadas y deshabilitadas
        context = {
            "form": form,
            'today': today,
            'allowed_dates': allowed_dates,
            'disabled_dates': disabled_dates,
        }

        return render(request, self.template_name, context)

    def post(self, request, slug):
        # guarda el formulario con los datos ingresados
        form = self.form_class(request.POST)
        context = {
            "form": form,
        }
        if form.is_valid():
            # si el formulario es válido parseo las fechas del datepicker
            # y las convierto a objetos datetime
            date_string1 = form.cleaned_data["fechaDesdeHasta"][:10]
            date_string2 = form.cleaned_data["fechaDesdeHasta"][13:]
            date_object1 = datetime.datetime.strptime(date_string1, '%d/%m/%Y')
            date_object2 = datetime.datetime.strptime(date_string2, '%d/%m/%Y')
            # creo la reserva con los datos cargados por el usuario
            nueva_reserva = Reserva(
                fechaDesde = date_object1,
                fechaHasta = date_object2,
                cantAdultos=form.cleaned_data["cantAdultos"],
                # la cabaña se setea según el slug del url 
                cab=Cab.objects.get(slug=slug),
                # el estado se setea en pte confirmación
                estado=Estado.objects.get(nombre="Pte Confirmacion"),
            )
            # se guarda la reserva en la db
            nueva_reserva.save()
            # después del post exitoso se redirige al usuario al home
            return HttpResponseRedirect(reverse("inquilinos:index"))
        # si el formulario no fue válido se devuelve el formulario con los datos incorrectos 
        return render(request, self.template_name, context)
